{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mgtru\\\\Documents\\\\Work\\\\Cognixia\\\\Code\\\\React\\\\components-project\\\\components-project\\\\src\\\\components\\\\CardLayout.jsx\";\nimport React from \"react\";\nimport Card from './Card';\nimport { useFetch } from '../service/StudentService';\n\nfunction CardLayout(props) {\n  const {\n    loading,\n    data\n  } = useFetch('getAll', null);\n  let decks = [];\n\n  const CardDeck = props => {\n    console.log(props.students);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-deck\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }\n    }, props && props.student.map((student, cardCount) => /*#__PURE__*/React.createElement(Card, {\n      key: student.id,\n      info: student,\n      handleDelete: props.handleDelete,\n      handleUpdate: props.handleUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 61\n      }\n    }))));\n  };\n\n  const DeckFormatter = () => {\n    let subDecks = [];\n    let cardCount = 1;\n    let deckMax = 4;\n    let maxSet = false;\n    console.log(data);\n    cardCount % deckMax === 0 ? maxSet = true : maxSet = false;\n    data.forEach(student => {\n      if (!maxSet) {\n        subDecks.push(student);\n        cardCount++;\n      } else {\n        decks.push(subDecks);\n        subDecks = [];\n      }\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, decks.map(students => /*#__PURE__*/React.createElement(CardDeck, {\n      students: students,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 34\n      }\n    })));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, loading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 19\n    }\n  }, \"loading...\"), data && data.length > 1 && /*#__PURE__*/React.createElement(DeckFormatter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 28\n    }\n  }));\n}\n\nexport default CardLayout;","map":{"version":3,"sources":["C:/Users/mgtru/Documents/Work/Cognixia/Code/React/components-project/components-project/src/components/CardLayout.jsx"],"names":["React","Card","useFetch","CardLayout","props","loading","data","decks","CardDeck","console","log","students","student","map","cardCount","id","handleDelete","handleUpdate","DeckFormatter","subDecks","deckMax","maxSet","forEach","push","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,QAAyB,2BAAzB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBJ,QAAQ,CAAC,QAAD,EAAW,IAAX,CAAlC;AACA,MAAIK,KAAK,GAAG,EAAZ;;AAEA,QAAMC,QAAQ,GAAIJ,KAAD,IAAW;AAC1BK,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,QAAlB;AACA,wBAAO,uDACL;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGP,KAAK,IAAIA,KAAK,CAACQ,OAAN,CAAcC,GAAd,CAAkB,CAACD,OAAD,EAAUE,SAAV,kBAAwB,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEF,OAAO,CAACG,EAAnB;AAAuB,MAAA,IAAI,EAAEH,OAA7B;AAAsC,MAAA,YAAY,EAAER,KAAK,CAACY,YAA1D;AAAwE,MAAA,YAAY,EAAEZ,KAAK,CAACa,YAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA1C,CADZ,CADK,CAAP;AAKD,GAPD;;AASA,QAAMC,aAAa,GAAG,MAAM;AAC1B,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIL,SAAS,GAAG,CAAhB;AACA,QAAIM,OAAO,GAAG,CAAd;AACA,QAAIC,MAAM,GAAG,KAAb;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAQ,IAAAA,SAAS,GAAGM,OAAZ,KAAwB,CAAxB,GAA4BC,MAAM,GAAG,IAArC,GAA4CA,MAAM,GAAG,KAArD;AACAf,IAAAA,IAAI,CAACgB,OAAL,CAAcV,OAAD,IAAa;AACxB,UAAI,CAACS,MAAL,EAAa;AACXF,QAAAA,QAAQ,CAACI,IAAT,CAAcX,OAAd;AACAE,QAAAA,SAAS;AACV,OAHD,MAIK;AAACP,QAAAA,KAAK,CAACgB,IAAN,CAAWJ,QAAX;AAAsBA,QAAAA,QAAQ,GAAG,EAAX;AAAe;AAC5C,KAND;AAQA,wBACE,0CACKZ,KAAK,CAACM,GAAN,CAAUF,QAAQ,iBAAI,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAIA,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAtB,CADL,CADF;AAMD,GArBD;;AAuBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADd,EAEGC,IAAI,IACHA,IAAI,CAACkB,MAAL,GAAc,CADf,iBACoB,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHvB,CADF;AASD;;AAED,eAAerB,UAAf","sourcesContent":["import React from \"react\";\r\nimport Card from './Card';\r\nimport { useFetch } from '../service/StudentService';\r\n\r\nfunction CardLayout(props) {\r\n  const { loading, data } = useFetch('getAll', null);\r\n  let decks = [];\r\n\r\n  const CardDeck = (props) => {\r\n    console.log(props.students);\r\n    return(<>\r\n      <div className='card-deck'>\r\n        {props && props.student.map((student, cardCount) => <Card key={student.id} info={student} handleDelete={props.handleDelete} handleUpdate={props.handleUpdate} />)}\r\n      </div>\r\n    </>);\r\n  }\r\n\r\n  const DeckFormatter = () => {\r\n    let subDecks = [];\r\n    let cardCount = 1;\r\n    let deckMax = 4;\r\n    let maxSet = false;\r\n    console.log(data);\r\n    cardCount % deckMax === 0 ? maxSet = true : maxSet = false;\r\n    data.forEach((student) => {\r\n      if (!maxSet) {\r\n        subDecks.push(student)\r\n        cardCount++;\r\n      }\r\n      else {decks.push(subDecks); subDecks = [];}\r\n    });\r\n\r\n    return(\r\n      <>\r\n          {decks.map(students => <CardDeck students = {students} />)}\r\n      </>\r\n    );\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {loading && <p>loading...</p>}\r\n      {data &&\r\n        data.length > 1 && <DeckFormatter/>\r\n      }\r\n      {/* {data && data.length > 0 && <Card info = {data.id} /> } */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardLayout;"]},"metadata":{},"sourceType":"module"}