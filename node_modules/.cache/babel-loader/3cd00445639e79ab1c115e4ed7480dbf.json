{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mgtru\\\\Documents\\\\Work\\\\Cognixia\\\\Code\\\\React\\\\components-project\\\\components-project\\\\src\\\\components\\\\CardLayout.jsx\";\nimport React from \"react\";\nimport Card from './Card';\nimport { useFetch } from '../service/StudentService';\n\nfunction CardLayout(props) {\n  const {\n    loading,\n    data\n  } = useFetch('getAll', null);\n  let decks = [];\n\n  const CardDeck = props => {\n    console.log(props.students);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-deck\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }\n    }));\n  };\n\n  const DeckFormatter = () => {\n    let subDecks = [];\n    let cardCount = 0;\n    let deckMax = 4;\n    let maxSet = false;\n    cardCount % deckMax === 0 ? maxSet = true : maxSet = false;\n    data.forEach(student => {\n      if (!maxSet) {\n        decks.push(student);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, loading && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 19\n    }\n  }, \"loading...\"), data && data.length > 1 && data.map(students => /*#__PURE__*/React.createElement(CardDeck, {\n    students: students,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 30\n    }\n  })));\n}\n\nexport default CardLayout;","map":{"version":3,"sources":["C:/Users/mgtru/Documents/Work/Cognixia/Code/React/components-project/components-project/src/components/CardLayout.jsx"],"names":["React","Card","useFetch","CardLayout","props","loading","data","decks","CardDeck","console","log","students","DeckFormatter","subDecks","cardCount","deckMax","maxSet","forEach","student","push","length","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,QAAyB,2BAAzB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBJ,QAAQ,CAAC,QAAD,EAAW,IAAX,CAAlC;AACA,MAAIK,KAAK,GAAG,EAAZ;;AAEA,QAAMC,QAAQ,GAAIJ,KAAD,IAAW;AAC1BK,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,QAAlB;AACA,wBAAO,uDACL;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADK,CAAP;AAKD,GAPD;;AASA,QAAMC,aAAa,GAAG,MAAM;AAC1B,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,SAAS,GAAG,CAAhB;AACA,QAAIC,OAAO,GAAG,CAAd;AACA,QAAIC,MAAM,GAAG,KAAb;AACAF,IAAAA,SAAS,GAAGC,OAAZ,KAAwB,CAAxB,GAA4BC,MAAM,GAAG,IAArC,GAA4CA,MAAM,GAAG,KAArD;AACAV,IAAAA,IAAI,CAACW,OAAL,CAAcC,OAAD,IAAa;AACxB,UAAI,CAACF,MAAL,EAAa;AACXT,QAAAA,KAAK,CAACY,IAAN,CAAWD,OAAX;AACD;AACF,KAJD;AAMD,GAZD;;AAcA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGb,OAAO,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADd,EAEGC,IAAI,IACHA,IAAI,CAACc,MAAL,GAAc,CADf,IAECd,IAAI,CAACe,GAAL,CAASV,QAAQ,iBAAI,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAIA,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArB,CAJJ,CADF;AASD;;AAED,eAAeR,UAAf","sourcesContent":["import React from \"react\";\r\nimport Card from './Card';\r\nimport { useFetch } from '../service/StudentService';\r\n\r\nfunction CardLayout(props) {\r\n  const { loading, data } = useFetch('getAll', null);\r\n  let decks = [];\r\n\r\n  const CardDeck = (props) => {\r\n    console.log(props.students);\r\n    return(<>\r\n      <div className='card-deck'>\r\n        {/* {props.student.map((student, cardCount) => <Card key={student.id} info={student} handleDelete={props.handleDelete} handleUpdate={props.handleUpdate} />)} */}\r\n      </div>\r\n    </>);\r\n  }\r\n\r\n  const DeckFormatter = () => {\r\n    let subDecks = [];\r\n    let cardCount = 0;\r\n    let deckMax = 4;\r\n    let maxSet = false;\r\n    cardCount % deckMax === 0 ? maxSet = true : maxSet = false;\r\n    data.forEach((student) => {\r\n      if (!maxSet) {\r\n        decks.push(student)\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {loading && <p>loading...</p>}\r\n      {data &&\r\n        data.length > 1 &&\r\n        data.map(students => <CardDeck students = {students} />)}\r\n      {/* {data && data.length > 0 && <Card info = {data.id} /> } */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardLayout;"]},"metadata":{},"sourceType":"module"}