{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mgtru\\\\Documents\\\\Work\\\\Cognixia\\\\Code\\\\React\\\\components-project\\\\components-project\\\\src\\\\state_and_life_cycle\\\\Clock.js\";\nimport React from 'react'; // temp is an object (JSON), it stores values in key, value pairs \n// state is also a JSON object doing same thing\n// const temp = {\n//     val1: 4,\n//     val2: \"\",\n//     val3: true\n// };\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      otherval: 3\n    };\n  } // function to reset date saved in the state\n  // we reset the state using the setState() because if we just called this.state = {new values}, it may not necessarily update this value on view\n\n\n  tick() {\n    this.setState({\n      date: new Date()\n    });\n  } // this function is call when component is mounted to page (put on page)\n  // timerID is used to stroe the ID keeping track of the state change of the clock\n  // Once <Clock> component is n DOM, this method will be called, letting the browser know that tick() should be called every second\n  // when tick() is called, state is updated (value of date updated), React will call render() function again to reload the display and show new time\n\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  } // clean up, make sure that if you remove (unmount) component from view, you stop and clear the increment of this clock\n\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, \"The other value: \", this.state.otherval, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, \"The time is \", this.state.date.toLocaleTimeString()));\n  }\n\n}\n\nexport default Clock;","map":{"version":3,"sources":["C:/Users/mgtru/Documents/Work/Cognixia/Code/React/components-project/components-project/src/state_and_life_cycle/Clock.js"],"names":["React","Clock","Component","constructor","props","state","date","Date","otherval","tick","setState","componentDidMount","timerID","setInterval","componentWillUnmount","clearInterval","render","toLocaleTimeString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAEhCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,IAAIC,IAAJ,EADG;AAETC,MAAAA,QAAQ,EAAE;AAFD,KAAb;AAIH,GAR+B,CAUhC;AACA;;;AACAC,EAAAA,IAAI,GAAG;AACH,SAAKC,QAAL,CAAe;AACXJ,MAAAA,IAAI,EAAE,IAAIC,IAAJ;AADK,KAAf;AAGH,GAhB+B,CAkBhC;AACA;AACA;AACA;;;AACAI,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,OAAL,GAAeC,WAAW,CACtB,MAAM,KAAKJ,IAAL,EADgB,EAEtB,IAFsB,CAA1B;AAIH,GA3B+B,CA6BhC;;;AACAK,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKH,OAAN,CAAb;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAqB,KAAKX,KAAL,CAAWG,QAAhC,MADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAgB,KAAKH,KAAL,CAAWC,IAAX,CAAgBW,kBAAhB,EAAhB,CAFJ,CADJ;AAMH;;AAzC+B;;AA6CpC,eAAehB,KAAf","sourcesContent":["import React from 'react';\n\n// temp is an object (JSON), it stores values in key, value pairs \n// state is also a JSON object doing same thing\n// const temp = {\n//     val1: 4,\n//     val2: \"\",\n//     val3: true\n// };\n\nclass Clock extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { \n            date: new Date(), \n            otherval: 3 \n        };\n    }\n\n    // function to reset date saved in the state\n    // we reset the state using the setState() because if we just called this.state = {new values}, it may not necessarily update this value on view\n    tick() {\n        this.setState( { \n            date: new Date()\n         } );\n    }\n\n    // this function is call when component is mounted to page (put on page)\n    // timerID is used to stroe the ID keeping track of the state change of the clock\n    // Once <Clock> component is n DOM, this method will be called, letting the browser know that tick() should be called every second\n    // when tick() is called, state is updated (value of date updated), React will call render() function again to reload the display and show new time\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    // clean up, make sure that if you remove (unmount) component from view, you stop and clear the increment of this clock\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    render() {\n        return(\n            <div>\n                <p>The other value: {this.state.otherval} </p>\n                <p>The time is {this.state.date.toLocaleTimeString()}</p>\n            </div>\n        );\n    }\n\n}\n\nexport default Clock;"]},"metadata":{},"sourceType":"module"}